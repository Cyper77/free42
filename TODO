Make the orange labels on the PocketPC "Standard" skin larger. The buttons can
easily be made 2 pixels shorter, which creates room to make the orange labels 2
pixels taller -- like they are on the Windows/Unix "Standard" skin.

PocketPC version: a few people suggested hiding the "top" bar to make some more
room available for taller skins. Apparently, Emu48 and some other applications
do this. Will need to do a little research there (do I simply use another
window style? Without a topbar, how do you close the window or switch apps?).

PalmOS version: support 320x480 screens, and dynamic screen size changes.
Use WinScreenGetAttribute() to find the screen size and density (only if High-
Density Display Feature Set is present!).
Use SysGetOrientationTriggerState() to find out if orientation changes are
supported (only if the Pen Input Manager Feature Set is present and returns
version 1.1!).
It seems like dynamic input areas are standard if the Pen Input Manager is
present (any version > 0).

PalmOS version: repainting the display is slow when using high-resolution
skins. Moving all multiplications out of the blitter loop did not yield a
noticeable speed-up, nor did aligning the display bitmap to an even pixel X
coordinate.
Things left to try: use a compatible bitmap instead of a monochrome; if that
doesn't do the trick either, keep track of which pixels are *actually* changed
in shell_blitter(), and call WinDrawBitmap() with the smallest possible
rectangle. Note that this drastic approach may require some help from the core
(need to make sure we don't receive unnecessary clear-display requests; those
would completely defeat this acceleration scheme).
UPDATE: there may be a really simple solution: use WinSetScalingMode() to
disable bitmap scaling, and then use a plain old-fashioned low-density bitmap
for the display. Not sure *why* that would perform better than using a V3
pixmap (it's still the same number of pixels), but heck, it's worth a try.

Auto-repeat: for keys where the usual holding-down behavior isn't needed
(number keys, backspace, etc.) it might be nice to support auto-repeat.

HP-41 module support. Should be able to read ROM files, and maybe also MOD.
(Requested by Vincent Weber, 12/21/2005)
Additional thoughts by ThO:
The basic functionality of extracting user code from module ROM images is
already provided by the rom2raw program, but of course it would be nice to
integrate this into Free42 itself. However, in order to prevent the PGM catalog
from getting hopelessly cluttered, Free42 really should support directories.
If HP could add directories to the 28C to support the extra memory of the 28S,
surely I can do the same here -- and Free42 needs it even more than the 28S...

Algebraic equations, a la HP-27S.

Fractions.

Plain-text program import/export.

Import/export of variables.

Alternative forms of complex number entry and display: in addition to the
COMPLEX command, there should be ways to enter complex numbers in rectangular
or polar format *regardless* of the setting of flag 73. When numbers are
entered using those new commands (let's call them R.CPX and P.CPX for the sake
of discussion), the rect/polar display mode should "stick" to them, so they
will keep being displayed the same way even if flag 73 is toggled. Three
additional commands are needed to change a number's sticky mode (or maybe just
two; a number can always be forced back to "classic" behavior by doing COMPLEX
COMPLEX).
(Requested by Jeff O., 1/28/2005)
Additional thoughts by ThO:
Note that the "sticky" display mode could potentially break existing programs,
so it should be optional. Also, it is a LOT of work to implement, because the
complex data type has to be changed, and all the code that handles complex
numbers -- that's hundreds of code changes throughout the emulator core.
As an alternative, consider a partial implementation, where we add only the
R.CPX and P.CPX commands (plus possibly SHOW POLAR and SHOW RECT commands so
the user can view numbers in the format of their choice without having to
switch modes). Note: after entering a number, it should be displayed in the
format the user entered it in, for a second or two, before reverting to the
format specified by flag 73 -- in other words, when using R.CPX in POLAR mode,
or P.CPX in RECT mode, automatically do a SHOW RECT or SHOW POLAR as well.
