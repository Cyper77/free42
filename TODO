iPhone version: leaving the HTTP Server doesn't always manage to close the
server socket. The result can be (1) reopening the HTTP Server fails to bind
the socket to the desired port, or (2) the app hangs, presumably while trying
to connect to the socket to tell the server to shut down. In both cases, the
server loop appears to be hanging, which in turn must have something to do
with the fact that it handles all connections on a single thread: when handling
one connection never terminates for whatever reason, all subsequent operations
either fail (case #1, above) or hang (case #2, above).
UPDATE: This can be fixed by adding the following after the socket() call:
+-----------------------------------------------------------------------+
| int optval = 1;                                                       |
| setsockopt(ssock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)); |
+-----------------------------------------------------------------------+
Add these lines, test, and include them in the next release.

iPhone and Android versions:
* Add option to disable key click.
* Haptic feedback option.

Android version:
* The key click is flaky on some devices. Why?
* Add android:installLocation property to the manifest, to support installing
  the app on external memory (SD card) under Android 2.2 or later. See
  http://developer.android.com/guide/appendix/install-location.html
* Add an option to display skins scaled to their maximum size while maintaining
  aspect ratio, or to display skins without any scaling.
* The "Print-Out" menu option needs a better icon.
* ACCEL, LOCAT, and HEADING don't work on a lot of devices. I'll have to
  rewrite them using the new APIs (ugh).
* Add support for physical keyboards.
* Implement pop-up keyboard for ALPHA mode text entry.

All versions: make sure Free42 saves its state when the OS shuts down. The
Android, and iOS versions should be OK because the OS controls their
life-cycle anyway, but the desktop versions probably need to
deal with OS shutdown explicitly. Even the Linux version may need some
attention; while it performs a graceful exit on SIGINT, it may also be killed
by the X server shutting down, and if that causes an X I/O error, that makes
Free42 send itself a QUIT signal, which causes a core dump (this is good for
debugging but probably should be changed to sending an INT signal for release
builds).

iPhone version: the HTTP server interface should provide a way to delete files.

Windows version: the "Calculator Key" option should probably set
\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AppKey\18\ShellExecute,
not \HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\AppKey\18\ShellExecute.
Easy enough to fix, but make sure that the new code restores the
HKEY_LOCAL_MACHINE key so that people won't have to use regedit to get rid of
the Free42 mapping!

Another Windows "Calculator Key" issue: it doesn't seem to work in multi-
language installs. Some other registry key overriding the obvious one, it
seems.

Mac version: implement print-out window.
Modify the file selection dialogs so they have a file type menu, and add
extensions to file names automagically when appropriate.
Pressing Command-N, or any Command-key combination that isn't defined in the
menu, causes Free42 to act as if the key were pressed without Command, and
never released... after which, the keyboard is unresponsive to mouse clicks,
and you need to press some other keyboard key to unfreeze it.

iPhone version: implement print-out window.
Implement program import/export to local files.
Implement pop-up keyboard for ALPHA mode text entry.
Implement copy & paste.
Implement URL decoding for HTTP requests (filenames with spaces, etc.)

iPhone version: it is possible to disable the sleep timer using
[UIApplication sharedApplication].idleTimerDisabled = YES;
This would be a good thing to use to prevent auto-poweroff while a program
is running.

Add a feature for importing and exporting variables from and to CSV files.

It would be nice if we would handle the shell_milliseconds()
wrap-around. This function is only used for flying the goose and
updating the progress report when the solver is running interactively;
all it would take is for those two places in the code to detect
unlikely values of (startTime - shell_milliseconds()) and assume the nearest
likely alternative, a la Y2K.
