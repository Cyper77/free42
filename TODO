When windows/Free42.exe is built with PHLOAT_IS_DOUBLE, the solver does not
converge on "SUN" with TILT=23.5, LAT=52, SEAS=3.75, HGHT=0, SOLVE("TOD")
(start TOD with 0 and 12). Noticed while running the PLOT test case with
YMIN=0, YMAX=12, AXIS=-1, XMIN=0, XMAX=360, XINC=30, indep=SEAS, solve for TOD.
PHLOAT_IS_DOUBLE does not have this effect in the Unix build.
Note that the values do seem to converge on something; either the stopping
criteria are failing or there is some numerical weirdness going on.

Latest thought: never mind creating a lean-and-mean version; let's just go for
only one version, with 12-byte phloats. On the Palm, let's not even support
binary mode. Decimal will perform well enough, right? Plus, we get rid of the
MathLib requirement, and we can get rid of the nasty decimal<->string crap in
*all* versions.
But, before burning any bridges, make sure that performance of the new BCD
version is not *much* worse than the classic version's; check this using
plot_thomas and a few large matrix ops.
OR... Create two versions for PalmOS (one where we do "#define phloat double"
and include all existing support code (string<->binary, gamma, MathLib), and
one that is basically identical to the PC builds, but w/o the binary (long
double) stuff. For the PC (Windows/Unix) builds, go with only one build, that
is switchable between BCD and long double.

While getting rid of all the stuff that is neither GNU libm nor Hugh Steers'
BCD, I should also be able to get rid of math_gamma(), and instead implement a
mappable gamma using plain old gamma() from GNU libm. (Why didn't I use GNU
libm gamma() for the Unix build, BTW? Was there an actual reason for that?)

Look for PHLOAT_TODO and do them:
Convert programs, variables, and other persistent data (stat, solve, integ,
other globals?). Basically every phloat with global visibility and extent
needs conversion.
When reading a core-version <= 8 state file, always do the mode switch to
decimal? It's probably what many users will want anyway, and most of the
others won't care...

2 versions:
a) "Fast": define "phloat" as "double"; same as before
b) "Accurate": define "phloat" as a 12-byte type that is
   either IEEE-754 "long double" ("extended"), or Hugh Steers'
   BCD type with P=5 (5 base-10,000 digits, i.e. worst case
   17 decimal digits -- good enough for 42S compatibility)

The PalmOS version of gcc supports "long double", but MathLib does not, so I'll
need to copy the relevant code from glibc -- here's hoping that code is not
GPL, or else I'm stuck.

Number entry and display should support 4-digit exponents -- at least, if we're
going to use Hugh Steers' BCD code. But it could be nice anyway, because it
would also allow supporting 'long double' throughout the binary version.

Regression test HMS+, HMS-, ->HMS, ->HR, ISG, DSE, ->DEC, ->OCT, AIP,
DIM, NEWMAT, GETM, R<>R, string<->number conversion.

In the PalmOS version, allow running w/o MathLib -- but: lock the "Decimal"
checkbox in the "on" position in this case. (Pop up a message box about MathLib
if the user clicks on the disabled checkbox.)
Note that we don't need the BCD conversion database in decimal mode. How hard
would it be to defer generating/loading it until binary mode is actually turned
on? This would be really nice for old Palms: eliminating MathLib *and* an
annoyingly large database.
Note that I should switch to a more space-efficient float/string converter:
the current lookup-table approach becomes a tad unwieldy with "long double" --
because of the wider mantissa and the greater dynamic range, the table would
grow by a factor of nearly 40, which is a no-no for 2 MB PalmOS machines.

When switching modes, not only convert all phloat variables in memory, but
also convert all non-int4 number literals in programs!

...............................................................................

LN(POS_HUGE_DOUBLE iPOS_HUGE_DOUBLE) returns something involving <Infinity>

Pocket PC version.

PalmOS version: support dynamic screen size changes (dynamic input area;
portrait/landscape mode switching). The tricky bit: storing the currenly
selected skin will no longer be a simple matter of keeping track of one skin
name; I'll have to keep track of a list of name/resolution pairs, and the skin
size (in pixels) has to be added to the skin resource format -- and the Skin
menu has to be dynamically updated so it only shows skins that are usable at
the current screen size.

PalmOS version: repainting the display, when using high-resolution skins on
the Tungsten E, is slow. I should profile this; is my code for constructing
high-resolution bitmaps inefficient, or am I using the wrong PalmOS calls, or
is PalmOS itself to blame?

Get a PayPal account to accept donations. :-)

=============================== And *maybe*... ================================

HP-41 module support. Should be able to read ROM files, and maybe also MOD.
(Requested by Vincent Weber, 12/21/2005)
Additional thoughts by ThO:
The basic functionality of extracting user code from module ROM images is
already provided by the rom2raw program, but of course it would be nice to
integrate this into Free42 itself. However, in order to prevent the PGM catalog
from getting hopelessly cluttered, Free42 really should support directories.
If HP could add directories to the 28C to support the extra memory of the 28S,
surely I can do the same here -- and Free42 needs it even more than the 28S...

Auto-repeat: for keys where the usual holding-down behavior isn't needed
(number keys, backspace, etc.) it might be nice to support auto-repeat.

The requests for fractions, equations, and decimal floating point keep cropping
up; I'm not committing to those features but I decided to put them back in the
TODO list so that people are aware that I am aware of these requests. :-)

GTK version.

Plain-text program import/export.

Import/export of variables.

Alternative forms of complex number entry and display: in addition to the
COMPLEX command, there should be ways to enter complex numbers in rectangular
or polar format *regardless* of the setting of flag 73. When numbers are
entered using those new commands (let's call them R.CPX and P.CPX for the sake
of discussion), the rect/polar display mode should "stick" to them, so they
will keep being displayed the same way even if flag 73 is toggled. Three
additional commands are needed to change a number's sticky mode (or maybe just
two; a number can always be forced back to "classic" behavior by doing COMPLEX
COMPLEX).
(Requested by Jeff O., 1/28/2005)
Additional thoughts by ThO:
Note that the "sticky" display mode could potentially break existing programs,
so it should be optional. Also, it is a LOT of work to implement, because the
complex data type has to be changed, and all the code that handles complex
numbers -- that's hundreds of code changes throughout the emulator core.
As an alternative, consider a partial implementation, where we add only the
R.CPX and P.CPX commands (plus possibly SHOW POLAR and SHOW RECT commands so
the user can view numbers in the format of their choice without having to
switch modes). Note: after entering a number, it should be displayed in the
format the user entered it in, for a second or two, before reverting to the
format specified by flag 73 -- in other words, when using R.CPX in POLAR mode,
or P.CPX in RECT mode, automatically do a SHOW RECT or SHOW POLAR as well.
