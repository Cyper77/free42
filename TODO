During a binary<->decimal mode switch, update the pc and the RTN stack.

The decimal code in the PalmOS build is buggy. Obvious workaround: just change
*all* occurrences of "int" to "int4". Slightly more interesting approach:
change all occurrences of "int" to "int2" and debug the bastard in the good old
Unix environment. If plan B fails, I should always be able to fall back on plan
A...
Update: OK, so it's not that simple. It looks an awful lot like a compiler bug.
Try narrowing it down by commenting out everything in bcd.cc and bcdmath.cc
except, say, fmod(), and maybe stare at the compiler output. Of course, it
could also be a linker bug, in which case it get really ugly.

LN(POS_HUGE_DOUBLE iPOS_HUGE_DOUBLE) returns something with <Infinity> for the
real part. The problem is that hypot(re, im) returns Inf in this case; this can
be worked around by scaling re and im down before computing hypot, and then
adusting the result of log(hypot(re, im)). Note: the current hypot() in the
BCDFloat class overflows at 1e5000; this, too, needs to be addressed by scaling
the argument down and then adjusting the result.

Does the BCD code leak memory? I couldn't help noticing that some of the
operators defined in the BCD class return dynamically allocated references.
Must ask Hugh -- it *seems* like a no-no to me.

Decimal version: implement gamma(), and add *proper* implementations of log1p()
and expm1(). Also, are the current implementations of the hyperbolics
acceptable? I just used the usual equalities where they are expressed in terms
of logarithms and exponents.

...............................................................................

Pocket PC version.

PalmOS version: support dynamic screen size changes (dynamic input area;
portrait/landscape mode switching). The tricky bit: storing the currenly
selected skin will no longer be a simple matter of keeping track of one skin
name; I'll have to keep track of a list of name/resolution pairs, and the skin
size (in pixels) has to be added to the skin resource format -- and the Skin
menu has to be dynamically updated so it only shows skins that are usable at
the current screen size.

PalmOS version: repainting the display, when using high-resolution skins on
the Tungsten E, is slow. I should profile this; is my code for constructing
high-resolution bitmaps inefficient, or am I using the wrong PalmOS calls, or
is PalmOS itself to blame?

Get a PayPal account to accept donations. :-)

=============================== And *maybe*... ================================

Auto-repeat: for keys where the usual holding-down behavior isn't needed
(number keys, backspace, etc.) it might be nice to support auto-repeat.

HP-41 module support. Should be able to read ROM files, and maybe also MOD.
(Requested by Vincent Weber, 12/21/2005)
Additional thoughts by ThO:
The basic functionality of extracting user code from module ROM images is
already provided by the rom2raw program, but of course it would be nice to
integrate this into Free42 itself. However, in order to prevent the PGM catalog
from getting hopelessly cluttered, Free42 really should support directories.
If HP could add directories to the 28C to support the extra memory of the 28S,
surely I can do the same here -- and Free42 needs it even more than the 28S...

Algebraic equations, a la HP-27S.

Fractions.

GTK version.

Plain-text program import/export.

Import/export of variables.

Alternative forms of complex number entry and display: in addition to the
COMPLEX command, there should be ways to enter complex numbers in rectangular
or polar format *regardless* of the setting of flag 73. When numbers are
entered using those new commands (let's call them R.CPX and P.CPX for the sake
of discussion), the rect/polar display mode should "stick" to them, so they
will keep being displayed the same way even if flag 73 is toggled. Three
additional commands are needed to change a number's sticky mode (or maybe just
two; a number can always be forced back to "classic" behavior by doing COMPLEX
COMPLEX).
(Requested by Jeff O., 1/28/2005)
Additional thoughts by ThO:
Note that the "sticky" display mode could potentially break existing programs,
so it should be optional. Also, it is a LOT of work to implement, because the
complex data type has to be changed, and all the code that handles complex
numbers -- that's hundreds of code changes throughout the emulator core.
As an alternative, consider a partial implementation, where we add only the
R.CPX and P.CPX commands (plus possibly SHOW POLAR and SHOW RECT commands so
the user can view numbers in the format of their choice without having to
switch modes). Note: after entering a number, it should be displayed in the
format the user entered it in, for a second or two, before reverting to the
format specified by flag 73 -- in other words, when using R.CPX in POLAR mode,
or P.CPX in RECT mode, automatically do a SHOW RECT or SHOW POLAR as well.
