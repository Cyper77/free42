It would be nice if we would handle the shell_milliseconds()
wrap-around. This function is only used for flying the goose and
updating the progress report when the solver is running interactively;
all it would take is for those two places in the code to detect
unlikely values of (startTime - shell_milliseconds()) and assume the nearest
likely alternative, a la Y2K.

Use an UncaughtExceptionHandler so the weirdness doesn't disappear into the
bit bucket.

Hitting EXIT while the TS program is running (a loop with BEEP) causes
everything to freeze. Yikes.

The shell_beeper() slowness can probably be fixed by allowing one tone
to remain in progress while the function returns, i.e. don't wait for
the tone to finish before allowing program execution to resume, just
wait for it to finish before starting the next tone.