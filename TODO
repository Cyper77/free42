+----------------------------------------------------------------------------+
| NOTE: Most of the items in this list are "nice to have" things. I'm not    |
| promising that I will actually implement any of them -- I simply put any   |
| reasonable feature request in this list, and when I feel like programming, |
| I may or may not tackle any of these items. The only exceptions are bugs:  |
| those I *will* definitely fix as quickly as possible.                      |
+----------------------------------------------------------------------------+

GTK issues: (1) how to deal with Unix signals? In the Xt case, the use of
XtNoticeSignal ensures that the actual signal handling takes place within the
context of the main event loop, so calling quit() (which calls core_quit(),
among other things) is safe. The GTK docs are utterly silent on the subject of
Unix signals, so I'm assuming that (a) GTK is thread-safe, and (b) there is
some mechanism to make asynchronous notifications join the event loop, along
the lines of Java's SwingUtilities.invokeLater().
(2) Need to implement auto-repeat filtering. Basically, we need to keep track
of which keys (in terms of physical key codes) are down, and ignore any key-
down events we receive for those keys. There is a twist, unfortunately: the
way GDK filters auto-repeat KeyRelease events is not completely reliable; it
checks for equal timestamps in successive KeyRelease/KeyPress pairs, but
sometimes the timestamps are 1 millisecond apart. This means that sometimes
I'll get a bogus KeyRelease, and so I'll *also* have to check for subsequent
KeyPress events with the same timestamp checking I now do in Free42/Motif.
Also, I should submit a bug report to gtk.org about this (check the most
recent version of GDK first, though: maybe they fixed it already. The version
I'm using on my development box is a bit out of date).

Revisit window stuff for Motif & GTK versions. Some windows do not have the
correct behavior w.r.t. resizeability and presence of resize-bars (decoration)
and such. Make sure to run tests under Xnest + mwm, too.

When flag 21 is clear, should there be automatic printing in NORM and TRACE
modes? What about PRGM vs. RUN modes in this situation?

Decimal version: 1.01 ->HR 1 - yields 0.16666666666666666666666. That last 6
should be a 7. BCDFloat bug or ->HR bug?
UPDATE: 1/60 yields the correct result, but 1/60 + 1 is rounded wrong. Looks
like a bug in BCDFloat::add().

Get a PayPal account to accept donations. :-)

Pocket PC version.

The "Paste" command converts numbers from text to 'double' before passing them
to the emulator core; for the Decimal version, this can lead to inexact values
being pasted. The conversion should be direct from text to decimal in this
case.

PalmOS version: support dynamic screen size changes (dynamic input area;
portrait/landscape mode switching). The tricky bit: storing the currenly
selected skin will no longer be a simple matter of keeping track of one skin
name; I'll have to keep track of a list of name/resolution pairs, and the skin
size (in pixels) has to be added to the skin resource format -- and the Skin
menu has to be dynamically updated so it only shows skins that are usable at
the current screen size.

PalmOS version: repainting the display, when using high-resolution skins on
the Tungsten E, is slow. I should profile this; is my code for constructing
high-resolution bitmaps inefficient, or am I using the wrong PalmOS calls, or
is PalmOS itself to blame?

Auto-repeat: for keys where the usual holding-down behavior isn't needed
(number keys, backspace, etc.) it might be nice to support auto-repeat.

HP-41 module support. Should be able to read ROM files, and maybe also MOD.
(Requested by Vincent Weber, 12/21/2005)
Additional thoughts by ThO:
The basic functionality of extracting user code from module ROM images is
already provided by the rom2raw program, but of course it would be nice to
integrate this into Free42 itself. However, in order to prevent the PGM catalog
from getting hopelessly cluttered, Free42 really should support directories.
If HP could add directories to the 28C to support the extra memory of the 28S,
surely I can do the same here -- and Free42 needs it even more than the 28S...

Algebraic equations, a la HP-27S.

Fractions.

GTK version.

Plain-text program import/export.

Import/export of variables.

Alternative forms of complex number entry and display: in addition to the
COMPLEX command, there should be ways to enter complex numbers in rectangular
or polar format *regardless* of the setting of flag 73. When numbers are
entered using those new commands (let's call them R.CPX and P.CPX for the sake
of discussion), the rect/polar display mode should "stick" to them, so they
will keep being displayed the same way even if flag 73 is toggled. Three
additional commands are needed to change a number's sticky mode (or maybe just
two; a number can always be forced back to "classic" behavior by doing COMPLEX
COMPLEX).
(Requested by Jeff O., 1/28/2005)
Additional thoughts by ThO:
Note that the "sticky" display mode could potentially break existing programs,
so it should be optional. Also, it is a LOT of work to implement, because the
complex data type has to be changed, and all the code that handles complex
numbers -- that's hundreds of code changes throughout the emulator core.
As an alternative, consider a partial implementation, where we add only the
R.CPX and P.CPX commands (plus possibly SHOW POLAR and SHOW RECT commands so
the user can view numbers in the format of their choice without having to
switch modes). Note: after entering a number, it should be displayed in the
format the user entered it in, for a second or two, before reverting to the
format specified by flag 73 -- in other words, when using R.CPX in POLAR mode,
or P.CPX in RECT mode, automatically do a SHOW RECT or SHOW POLAR as well.
