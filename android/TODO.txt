It would be nice if we would handle the shell_milliseconds()
wrap-around. This function is only used for flying the goose and
updating the progress report when the solver is running interactively;
all it would take is for those two places in the code to detect
unlikely values of (startTime - shell_milliseconds()) and assume the nearest
likely alternative, a la Y2K.

Use an UncaughtExceptionHandler so the weirdness doesn't disappear into the
bit bucket.

Keyboard support!

Scan not only /sdcard/Free42 but also /sdcard/free42 while looking for skins
(or any other activity, for that matter) -- just to avoid problems with OSes
that have different ideas about FAT32 case handling or whatever.

Print-out performance: Is it faster to invalidate before scrolling instead of
after? Seems like it might be. Another option to consider is calling
invalidate() (*not* postInvalidate()) from the Runnable. No sense in over-
thinking this, I guess; time for some actual experimentation and measurements.

Macro execution: Shouldn't the display be re-enabled *before* the last
keystroke? Or, alternatively, should I force a full repaint after a macro
finishes? How did I handle this in the other versions?

On the Archos 5, the display bitmap is rendered blurry. You'd think that
Paint.setAntiAlias(false) and Paint.setFilterBitmap(false) would fix that, but
they don't. It looks like I'll have to create a full-resolution off-screen
bitmap and then blit that, like on the iPhone. Yuk.
This affects the print-out window, too. More yuk.
